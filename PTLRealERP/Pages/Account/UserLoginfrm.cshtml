@page
@model PTLRealERP.Pages.Account.UserLoginfrmModel
@{
}

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-md-12 table-responsive ">
                <table class="table table-sm table-hover caption-top display" id="myTable">
                    <caption>List of users</caption>
                    <thead class="table-light">
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Comcod</th>
                            <th scope="col">User_id</th>
                            <th scope="col">Short Name</th>
                            <th scope="col">Full Name</th>
                            <th scope="col">Designation</th>
                            <th scope="col">Password Active</th>
                            <th scope="col">Email_id</th>
                            <th scope="col">Web mail Password</th>
                            <th scope="col">Emp_id</th>
                            <th scope="col" style="width: 100px;">User Role</th>
                            <th scope="col"></th>
                           @* <th scope="col"></th>
                            <th scope="col"></th>*@
                        </tr>
                    </thead>
                    
                    
                </table>
            </div>
           
        </div>
        <button id="updateButton" class="btn btn-success btn-sm">Update</button>
    </div>
</div>


@* <div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit User</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <!-- Form for editing user data -->
                <form id="editForm">
                    <div class="form-group">
                        <label for="comcod">Comcod</label>
                        <input type="text" class="form-control" id="comcod" name="comcod">
                    </div>
                    <div class="form-group">
                        <label for="usrid">User_id</label>
                        <input type="text" class="form-control" id="usrid" name="usrid">
                    </div>
                    <!-- Add input fields for other user properties here -->
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="saveChanges">Save changes</button>
            </div>
        </div>
    </div>
</div> *@
@section Scripts{
    @{
    <partial name="_ValidationScriptsPartial" />
    }
   <script src="https://code.jquery.com/jquery-3.7.0.min.js"
            integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g="
            crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js" integrity="sha256-lSjKY0/srUM9BE3dPm+c4fBo1dky2v27Gdjm2uoZaL0=" crossorigin="anonymous"></script>

    <link href="https://cdn.datatables.net/v/bs5/jq-3.7.0/jszip-3.10.1/dt-1.13.6/af-2.6.0/b-2.4.1/b-colvis-2.4.1/b-html5-2.4.1/b-print-2.4.1/cr-1.7.0/date-1.5.1/fc-4.3.0/fh-3.4.0/kt-2.10.0/r-2.5.0/rg-1.4.0/rr-1.4.1/sc-2.2.0/sb-1.5.0/sp-2.2.0/sl-1.7.0/sr-1.3.0/datatables.min.css" rel="stylesheet">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/pdfmake.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/vfs_fonts.js"></script>
    <script src="https://cdn.datatables.net/v/bs5/jq-3.7.0/jszip-3.10.1/dt-1.13.6/af-2.6.0/b-2.4.1/b-colvis-2.4.1/b-html5-2.4.1/b-print-2.4.1/cr-1.7.0/date-1.5.1/fc-4.3.0/fh-3.4.0/kt-2.10.0/r-2.5.0/rg-1.4.0/rr-1.4.1/sc-2.2.0/sb-1.5.0/sp-2.2.0/sl-1.7.0/sr-1.3.0/datatables.min.js"></script>
    <script>
        $(document).ready(function () {
            var editedRow = null;
            //var currentPage = 0; // Track the current page
            var table = $('#myTable').DataTable({
                ajax: '/api/Users/myData',
                scrollX: true,
                scrollCollapse: true,
                scrollY: '50vh',
                // autoWidth: true,
                paging: true,
                lengthMenu: [
                    [10,20, 25, 50, -1],
                    ['10 rows', '20 rows', '25 rows', '50 rows', 'Show all']
                ],
                // "lengthMenu": [10, 20, 30, 40, 50, 100, [-1, "All"]],
                pageLength: 10, // Default page size
                columns: [
                    { data: 'row_num' },
                    { data: 'comcod' },
                    { data: 'usrid' },
                    { data: 'usrsname' },
                    { data: 'usrname' },
                    { data: 'usrdesig' },
                    // { data: 'usractive' },
                    {
                        data: 'usractive',
                        render: function (data, type, row) {
                            if (type === 'display') {
                                // Display a checkbox for editing
                                return '<input type="checkbox" ' + (data ? 'checked' : '') + '>';
                            }
                            return data ? 'Yes' : 'No';
                        }
                    }, // Display as checkbox by default
                    { data: 'mailid' },
                    { data: 'usrpass' },
                    { data: 'empid' },
                    { data: 'userrole' },
                    { data: null, render: function () { return '<div class="d-flex justify-content-start"><button class="edit-button btn btn-primary btn-sm">Edit</button></div>'; } } // Add Edit button
                ],
                'columnDefs': [{
                    'targets': [0,1,2,3],
                    'orderable': false, // orderable false
                }],
                'order': []
                
            });

            // Handle click event for Edit button
            $('#myTable tbody').on('click', '.edit-button', function () {
                //closeSideNavbar();
                if ($(".sidebar").hasClass("close")) {
                    var row = table.row($(this).parents('tr'));

                    if (editedRow !== null && editedRow !== row) {
                        cancelEditRow(editedRow);
                    }
                    //currentPage = row.page.info().page;

                    editRow(row);
                } else {
                    closeSideNavbar();
                }
               
                
            });

            // Handle click event for Save button within the edited row
            $('#myTable tbody').on('click', '.save-button', function () {
                //closeSideNavbar();
                if ($(".sidebar").hasClass("close")) {
                    var row = table.row($(this).parents('tr'));
                    saveRow(row);
                } else {
                    closeSideNavbar();
                }
                
                
            });
            // Handle click event for Cancel button within the edited row
            $('#myTable tbody').on('click', '.cancel-button', function () {
                //closeSideNavbar();
                if ($(".sidebar").hasClass("close")) {
                    var row = table.row($(this).parents('tr'));
                    cancelEditRow(row);
                } else {
                    closeSideNavbar();
                }
                
                
            });
            // Function to edit a row
            function editRow(row) {
                if (editedRow !== null && editedRow !== row) {
                    saveRow(editedRow);
                }
                // Get the page number of the edited row
               // currentPage = row.page.info().page;

                var data = row.data();
                var columns = table.settings().init().columns;

                row.nodes().to$().find('td').each(function (index) {
                    if (index === 0 || index === 1 || index === 2 || index === 9) return; // Skip the row number column

                    var column = columns[index];
                    var field = column.data;
                    var value = data[field];

                    if (field === 'usractive') {
                        // For boolean fields, display a checkbox for editing
                        var checkbox = $('<input type="checkbox">').prop('checked', value);
                        $(this).html(checkbox);
                    } else {
                        // For other fields, display an input field for editing
                        var input = $('<input type="text" class="form-control">').val(value);
                        $(this).html(input);
                    }
                });

                // Add a Save button to the last column
                row.nodes().to$().find('td:last').html('<div class="d-flex justify-content-start"><button style="margin-right: 2px !important;" class="save-button btn btn-primary btn-sm">Save</button> <button class="cancel-button btn btn-primary btn-sm">Cancel</button></div>');
                editedRow = row;
                table.columns.adjust().draw(false);
                //table.page(currentPage).draw(false);
            }

            // Function to save the edited row
            function saveRow(row) {
                var data = row.data();
                var columns = table.settings().init().columns;

                row.nodes().to$().find('td').each(function (index) {
                    if (index === 0 || index === 1 || index === 2 || index === 9) return; // Skip the row number column

                    var column = columns[index];
                    var field = column.data;

                    if (field === 'usractive') {
                        // For boolean fields, get the checkbox value
                        data[field] = $(this).find('input[type="checkbox"]').prop('checked');
                    } else {
                        // For other fields, get the input field value
                        data[field] = $(this).find('input').val();
                    }
                });

                // Update the data and redraw the row
                row.data(data).draw(false);

                // Return to the page where the row was edited
                //table.page(currentPage).draw(false);
                editedRow = null;               
            }
            // Function to cancel editing
            function cancelEditRow(row) {
                var data = row.data();
                var columns = table.settings().init().columns;

                row.nodes().to$().find('td').each(function (index) {
                    if (index === 0 || index === 1 || index === 2 || index === 9) return;

                    var column = columns[index];
                    var field = column.data;

                    if (field === 'usractive') {
                        var checkbox = $('<input type="checkbox">').prop('checked', data[field]);
                        $(this).html(checkbox);
                    } else {
                        var text = data[field];
                        $(this).html(text);
                    }
                });

                // Add the Edit button to the last column
                row.nodes().to$().find('td:last').html('<div class="d-flex justify-content-start"><button class="edit-button btn btn-primary btn-sm">Edit</button></div>');
                editedRow = null;
                table.columns.adjust().draw(false);
                //table.page(currentPage).draw(false);
            }
            function closeSideNavbar() {
                let sidebar = $(".sidebar");
                if (!sidebar.hasClass("close")) {
                    // Close the sidebar first
                    sidebar.addClass("close");
                }
            }
            // // Populate the table with data from your API
            // $.ajax({
            //     type: "GET",
            //     url: '/api/Users/myData', // Update with the correct route
            //     dataType: "json",
            //     success: function (data) {
            //         table.rows.add(data.data).draw();
            //     },
            //     error: function () {
            //         console.log("Error fetching data.");
            //     }
            // });
            $('#myTable tbody').on('change', 'input[type="checkbox"]', function () {

                var cell = table.cell($(this).closest('td')); // Get the cell associated with the checkbox
                var data = cell.data(); // Get the current cell data
                data = $(this).prop('checked'); // Update the cell data with the checkbox state
                cell.data(data).draw(false); // Redraw just the cell
                // This event handler will be triggered when checkboxes are checked or unchecked

                // Get the row associated with the checkbox
                // var row = table.row($(this).parents('tr'));
                // var data = row.data();              
                // data['usractive'] = $(this).prop('checked');
                // row.data(data).draw(false);
            });
            $('#updateButton').on('click', function () {
                var allData = table.rows().data().toArray();

                $.ajax({
                    url: '/api/Users/updateData', // Your server-side update endpoint
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(allData),
                    success: function (response) {
                        alert('Data updated successfully');
                    },
                    error: function (error) {
                        console.error('Error updating data:', error);
                    }
                });
            });

        });
    </script>

}

@*
            $(document).ready(function () {
            var table = $('#myTable').DataTable({
                ajax: '/api/Users/myData',  // URL to fetch JSON data
                scrollX: true,
                scrollCollapse: true,
                scrollY: '50vh',
                columnDefs: [
                    {
                        targets: 0,
                        data: null,
                        render: function (data, type, row, meta) {
                            // Render the row number (index + 1)
                            return meta.row + 1;
                        }
                    },
                    { targets: 1, data: 'comcod' },
                    { targets: 2, data: 'usrid' },
                    { targets: 3, data: 'usrsname' },
                    { targets: 4, data: 'usrname' },
                    { targets: 5, data: 'usrdesig' },
                    { targets: 6, data: 'usractive' },
                    { targets: 7, data: 'usrpass' },
                    { targets: 8, data: 'mailid' },
                    { targets: 9, data: 'empid' },
                    { targets: 10, data: 'userrole' },
                    {
                        targets: -2,
                        //edit button creation
                        render: function (data, type, row) {
                            return createButton('edit', row.id);
                        }
                    },
                    {
                        targets: -1,
                        //delete button creation
                        render: function (data, type, row) {
                            return createButton('delete', row.id);
                        }
                    }
                ]

            });
            function createButton(buttonType, rowID) {
                var buttonText = buttonType == "edit" ? "Edit" : "Delete";
                //var buttonStyle = buttonType == "edit" ? "btn btn-outline-primary" : "btn btn-outline-danger";
                //return '<button class="' + buttonType + ' ' +buttonStyle+'" type="button">' + buttonText + '</button>';

                return '<button class="' + buttonType +'" type="button">' + buttonText + '</button>';
            }


            $('#myTable').on('click', 'tbody td .edit', function (e) {
                fnResetControls();
                var dataTable = $('#myTable').DataTable();
                var clickedRow = $($(this).closest('td')).closest('tr');
                $(clickedRow).find('td').each(function () {
                    // do your cool stuff
                    if ($(this).hasClass('editable')) {
                        if ($(this).hasClass('text')) {
                            var html = fnCreateTextBox($(this).html(), 'name');
                            $(this).html($(html))
                        }
                    }
                });


                $('#myTable tbody tr td .update').removeClass('update').addClass('edit').html('Edit');
                $('#myTable tbody tr td .cancel').removeClass('cancel').addClass('delete').html('Delete');
                $(clickedRow).find('td .edit').removeClass('edit').addClass('update').html('Update');
                $(clickedRow).find('td .delete').removeClass('delete').addClass('cancel').html('Cancel');

            });

            function fnCreateTextBox(value, fieldprop) {
                return '<input data-field="' + fieldprop + '" type="text" value="' + value + '" ></input>';
            }




            $('#myTable').on('click', 'tbody td .cancel', function (e) {
                fnResetControls();
                $('#myTable tbody tr td .update').removeClass('update').addClass('edit').html('Edit');
                $('#myTable tbody tr td .cancel').removeClass('cancel').addClass('delete').html('Delete');
            });


            function fnResetControls() {
                var openedTextBox = $('#myTable').find('input');
                $.each(openedTextBox, function (k, $cell) {
                    $(openedTextBox[k]).closest('td').html($cell.value);
                })
            }



            $('#myTable').on('click', 'tbody td .update', function (e) {

                var openedTextBox = $('#myTable').find('input');
                $.each(openedTextBox, function (k, $cell) {
                    fnUpdateDataTableValue($cell, $cell.value);
                    $(openedTextBox[k]).closest('td').html($cell.value);
                })

                $('#myTable tbody tr td .update').removeClass('update').addClass('edit').html('Edit');
                $('#myTable tbody tr td .cancel').removeClass('cancel').addClass('delete').html('Delete');
            });

            function fnUpdateDataTableValue($inputCell, value) {
                var dataTable = $('#myTable').DataTable();
                var rowIndex = dataTable.row($($inputCell).closest('tr')).index();
                var fieldName = $($inputCell).attr('data-field');
                dataTable.rows().data()[rowIndex][fieldName] = value;
            }


        });
*@














@*<script>
    $(document).ready(function () {
        var table = $('#myTable').DataTable({
            ajax: '/api/Users/myData',  // URL to fetch JSON data
            scrollX: true,
            scrollCollapse: true,
            scrollY: '50vh',
            columns: [
                { data: null }, // Placeholder for the row number column
                { data: 'comcod' },
                { data: 'usrid' },
                { data: 'usrsname' },
                { data: 'usrname' },
                { data: 'usrdesig' },
                { data: 'usractive' },
                { data: 'usrpass' },
                { data: 'mailid' },
                { data: 'empid' },
                { data: 'userrole' }
            ],
            columnDefs: [
                {
                    // Target the first column (row number column) for custom rendering
                    targets: 0,
                    render: function (data, type, row) {
                        // Render the row number
                        return table.row(row).index() + 1;
                    }
                }
            ]
        });
    });
</script>*@





@*

        $(document).ready(function () {
            $('#myTable').DataTable({
                scrollX: true,
                scrollCollapse: true,
                scrollY: '50vh'
            });
            populateTable();

        });

        function populateTable() {
            $.ajax({
                type: "GET",
                url: '/api/Users/myData', // Update with the correct route
                dataType: "json",
                success: function (data) {
                    let i=1;
                    var tableBody = $("#myTable tbody");
                    tableBody.empty(); // Clear existing rows
                    $.each(data, function (index, item) {
                        tableBody.append(
                            '<tr>' +

                            '<td scope="row">' + i + '</td>' +
                            '<td>' + item.comcod + '</td>' +
                            '<td>' + item.usrid + '</td>' +
                            '<td>' + item.usrsname + '</td>' +
                            '<td>' + item.usrname + '</td>' +
                            '<td>' + item.usrdesig + '</td>' +
                            '<td>' + item.usractive + '</td>' +
                            '<td>' + item.usrpass + '</td>' +
                            '<td>' + item.mailid + '</td>' +
                            '<td>' + item.empid + '</td>' +
                            '<td>' + item.userrole + '</td>' +
                            '</tr>'
                        );
                        i++;
                    });
                    //$('#myTable').DataTable().draw();
                },
                error: function () {
                    console.log("Error fetching data.");
                }
            });
        }
*@
